name: build and test

on: 
  push

jobs:
#
# PYTHON
#
  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - name: black
      uses: lgeiger/black-action@master
      with:
        args: .

    - name: check for modifications
      id: git-check
      run: echo ::set-output name=modified::$(if git diff-index --quiet HEAD --; then echo "false"; else echo "true"; fi)

    - name: push changes
      if: steps.git-check.outputs.modified == 'true'
      run: |
        git config --global user.name github-actions
        git config --global user.email '${GITHUB_ACTOR@users.noreply.github.com'
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
        git checkout `basename $GITHUB_REF`
        git commit -am "Automated changes"
        git push origin HEAD:`basename $GITHUB_REF`

  version_tags:
    runs-on: ubuntu-latest

    outputs:
      image_tag: ${{ steps.git_ref.outputs.IMAGE_TAG }}

    steps:
    - uses: actions/checkout@v1

    - name: Set git envs for branch
      id: git_ref
      run: |
        echo "REF: " ${{ github.ref }}
        echo ::set-output name=IMAGE_TAG::$(echo ${GITHUB_REF#refs/heads/}-$(git rev-parse --short HEAD))

#    - name: Set git envs for tag
#      if: startsWith(github.ref, 'refs/tags/')
#      run: |
#        echo ::set-output name=IMAGE_TAG::$(echo $(git describe))

  package:
    name: build python package
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: build wheel
      run: |
        python -m pip install setuptools wheel --upgrade pip
        cd package/
        python setup.py -q bdist_wheel -d pychain.whl

    - uses: actions/upload-artifact@v2
      with:
        name: runfox-package
        path: package/pychain.whl

  test:
    name: test python packages
    runs-on: ubuntu-latest
    needs: [package]

    strategy:
      max-parallel: 3
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      id: download-package
      with:
        name: pychain-package
        path: images/pychain/artifacts/

    - name: set up python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: "test-package-install on ${{ matrix.python-version }}"
      run: |
        set -xe
        pip install images/pychain/artifacts/*.whl && \
        python -c "import pychain" && \
        python -c "import pychain.hash" && \
        python -c "import pychain.block"

    - name: pytest-packages
      run: |
        pip install -q pytest pytest-cov mock
        pytest --cov=pychain
